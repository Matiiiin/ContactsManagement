// <auto-generated />
using System;
using ContactsManagement.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactsManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250521114015_AddedRoleSeed")]
    partial class AddedRoleSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryID = new Guid("4d6681c6-d6d4-4520-8b4b-9ad183ee271c"),
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryID = new Guid("ff642272-7ae8-4a19-98fc-c51b6954ec58"),
                            CountryName = "USA"
                        },
                        new
                        {
                            CountryID = new Guid("34ccdd2d-da1d-4b71-9d4d-3963a33fadaf"),
                            CountryName = "Italy"
                        },
                        new
                        {
                            CountryID = new Guid("6b93e03b-24a5-4975-81b0-39cc5832a80c"),
                            CountryName = "Spain"
                        },
                        new
                        {
                            CountryID = new Guid("54b1e29d-acc5-4a74-914e-51143301af44"),
                            CountryName = "France"
                        },
                        new
                        {
                            CountryID = new Guid("3c061c30-c967-4a1a-a2ed-8da4ac4ab918"),
                            CountryName = "Canada"
                        },
                        new
                        {
                            CountryID = new Guid("aebe6d4e-aa50-4cba-8879-91cecf7b6110"),
                            CountryName = "Colombia"
                        });
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Comment of dateofbirth");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PersonName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("RecievesNewsLetters")
                        .HasColumnType("bit");

                    b.HasKey("PersonID");

                    b.HasIndex("CountryID");

                    b.ToTable("Persons", (string)null);

                    b.HasData(
                        new
                        {
                            PersonID = new Guid("0c97d5dd-5984-436a-a1f2-2fe1f3857a59"),
                            Address = "123 Maple Street, New York, NY",
                            CountryID = new Guid("4d6681c6-d6d4-4520-8b4b-9ad183ee271c"),
                            DateOfBirth = new DateTime(1985, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.johnson@example.com",
                            Gender = "Male",
                            PersonName = "Michael Johnson",
                            RecievesNewsLetters = true
                        },
                        new
                        {
                            PersonID = new Guid("be245ea5-9e28-4cb4-97c0-290bc619b082"),
                            Address = "456 Oak Avenue, Los Angeles, CA",
                            CountryID = new Guid("54b1e29d-acc5-4a74-914e-51143301af44"),
                            DateOfBirth = new DateTime(1992, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.davis@example.com",
                            Gender = "Female",
                            PersonName = "Emily Davis",
                            RecievesNewsLetters = false
                        },
                        new
                        {
                            PersonID = new Guid("e4ae92cb-76ef-4180-af85-e3117a7bf45a"),
                            Address = "789 Pine Road, Chicago, IL",
                            CountryID = new Guid("3c061c30-c967-4a1a-a2ed-8da4ac4ab918"),
                            DateOfBirth = new DateTime(1978, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.smith@example.com",
                            Gender = "Male",
                            PersonName = "James Smith",
                            RecievesNewsLetters = true
                        },
                        new
                        {
                            PersonID = new Guid("c7972b4b-c1cb-465e-948b-8c50969d56e8"),
                            Address = "321 Cedar Lane, Houston, TX",
                            CountryID = new Guid("ff642272-7ae8-4a19-98fc-c51b6954ec58"),
                            DateOfBirth = new DateTime(2000, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sophia.brown@example.com",
                            Gender = "Female",
                            PersonName = "Sophia Brown",
                            RecievesNewsLetters = false
                        },
                        new
                        {
                            PersonID = new Guid("32cc403b-38a6-41ce-87c4-415aacab9b9d"),
                            Address = "654 Birch Street, Phoenix, AZ",
                            CountryID = new Guid("34ccdd2d-da1d-4b71-9d4d-3963a33fadaf"),
                            DateOfBirth = new DateTime(1995, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "william.garcia@example.com",
                            Gender = "Male",
                            PersonName = "William Garcia",
                            RecievesNewsLetters = true
                        },
                        new
                        {
                            PersonID = new Guid("2c503e0b-5ae8-4248-a020-30bed949e283"),
                            Address = "987 Spruce Drive, Philadelphia, PA",
                            CountryID = new Guid("ff642272-7ae8-4a19-98fc-c51b6954ec58"),
                            DateOfBirth = new DateTime(1988, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "olivia.martinez@example.com",
                            Gender = "Female",
                            PersonName = "Olivia Martinez",
                            RecievesNewsLetters = true
                        },
                        new
                        {
                            PersonID = new Guid("5eda0c41-f885-4ec2-8a1c-68bf060cb9a2"),
                            Address = "159 Elm Court, San Antonio, TX",
                            CountryID = new Guid("34ccdd2d-da1d-4b71-9d4d-3963a33fadaf"),
                            DateOfBirth = new DateTime(1990, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "benjamin.wilson@example.com",
                            Gender = "Male",
                            PersonName = "Benjamin Wilson",
                            RecievesNewsLetters = false
                        },
                        new
                        {
                            PersonID = new Guid("878e4edf-f877-4db5-86fa-ef37dfbe1a2f"),
                            Address = "753 Willow Way, San Diego, CA",
                            CountryID = new Guid("6b93e03b-24a5-4975-81b0-39cc5832a80c"),
                            DateOfBirth = new DateTime(1998, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "isabella.anderson@example.com",
                            Gender = "Female",
                            PersonName = "Isabella Anderson",
                            RecievesNewsLetters = true
                        },
                        new
                        {
                            PersonID = new Guid("d2f86a9c-8681-4f76-89ab-aa18ea43bbc3"),
                            Address = "852 Aspen Circle, Dallas, TX",
                            CountryID = new Guid("54b1e29d-acc5-4a74-914e-51143301af44"),
                            DateOfBirth = new DateTime(1983, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexander.thomas@example.com",
                            Gender = "Male",
                            PersonName = "Alexander Thomas",
                            RecievesNewsLetters = false
                        },
                        new
                        {
                            PersonID = new Guid("574ae25f-2d09-4d57-8c76-56913731e0a1"),
                            Address = "951 Redwood Boulevard, San Jose, CA",
                            CountryID = new Guid("aebe6d4e-aa50-4cba-8879-91cecf7b6110"),
                            DateOfBirth = new DateTime(1993, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mia.taylor@example.com",
                            Gender = "Female",
                            PersonName = "Mia Taylor",
                            RecievesNewsLetters = true
                        });
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("815b6a98-bd4e-4c08-9ac1-7c795452e498"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8e2af4f9-5b73-4e1d-9ad8-a83b12b4b397"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.Person", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
